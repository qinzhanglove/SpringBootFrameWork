<appender name="console" class="org.apache.log4j.ConsoleAppender">
		<param name="Target" value="System.out" />
		<layout class="org.apache.log4j.PatternLayout">
			<param name="ConversionPattern"
				   value="[%t]%-d{MM-dd HH:mm:ss,SSS} %-5p:%X{user} - %c - %m%n" />
		</layout>
	</appender>

	/**
         * 400 - Bad Request
         */
        @ResponseBody
        @ResponseStatus(HttpStatus.BAD_REQUEST)
        @ExceptionHandler(MissingServletRequestParameterException.class)
        public ResultBean handleMissingServletRequestParameterException(MissingServletRequestParameterException e) {
            logger.error("缺少请求参数", e);
            return new ResultBean(e);
        }

        /**
         * 400 - Bad Request
         */
        @ResponseBody
        @ResponseStatus(HttpStatus.BAD_REQUEST)
        @ExceptionHandler(HttpMessageNotReadableException.class)
        public ResultBean handleHttpMessageNotReadableException(HttpMessageNotReadableException e) {
            logger.error("参数解析失败", e);
            return new ResultBean(e);
        }


        /**
         * 400 - Bad Request
         */
        @ResponseBody
        @ResponseStatus(HttpStatus.BAD_REQUEST)
        @ExceptionHandler(BindException.class)
        public ResultBean handleBindException(BindException e) {
            logger.error("参数绑定失败", e);
            BindingResult result = e.getBindingResult();
            FieldError error = result.getFieldError();
            String field = error.getField();
            String code = error.getDefaultMessage();
            String message = String.format("%s:%s", field, code);
            return new ResultBean(e);
        }

        /**
         * 400 - Bad Request
         */
        @ResponseBody
        @ResponseStatus(HttpStatus.BAD_REQUEST)
        @ExceptionHandler(ConstraintViolationException.class)
        public ResultBean handleServiceException(ConstraintViolationException e) {
            logger.error("参数验证失败", e);
            Set<ConstraintViolation<?>> violations = e.getConstraintViolations();
            ConstraintViolation<?> violation = violations.iterator().next();
            String message = violation.getMessage();
            return new ResultBean(e);
        }

        /**
         * 400 - Bad Request
         */
        @ResponseBody
        @ResponseStatus(HttpStatus.BAD_REQUEST)
        @ExceptionHandler(ValidationException.class)
        public ResultBean handleValidationException(ValidationException e) {
            logger.error("参数验证失败", e);
            return new ResultBean(e);
        }

        /**
         * 405 - Method Not Allowed
         */
        @ResponseBody
        @ResponseStatus(HttpStatus.METHOD_NOT_ALLOWED)
        @ExceptionHandler(HttpRequestMethodNotSupportedException.class)
        public ResultBean handleHttpRequestMethodNotSupportedException(HttpRequestMethodNotSupportedException e) {
            logger.error("不支持当前请求方法", e);
            return new ResultBean(e);
        }

        /**
         * 415 - Unsupported Media Type
         */
        @ResponseBody
        @ResponseStatus(HttpStatus.UNSUPPORTED_MEDIA_TYPE)
        @ExceptionHandler(HttpMediaTypeNotSupportedException.class)
        public ResultBean handleHttpMediaTypeNotSupportedException(Exception e) {
            logger.error("不支持当前媒体类型", e);
            return new ResultBean(e);
        }

        /**
         * 500 - Internal Server Error
         */
        @ResponseBody
        @ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR)
        @ExceptionHandler(BusinessException.class)
        public ResultBean handleServiceException(BusinessException e) {
            logger.error("业务逻辑异常", e);
            return new ResultBean(e);
        }

        /**
         * 500 - Internal Server Error
         */
        @ResponseBody
        @ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR)
        @ExceptionHandler(Exception.class)
        public ResultBean handleException(Exception e) {
            logger.error("通用异常", e);
            return new ResultBean(e);
        }

        /**
         * 操作数据库出现异常:名称重复，外键关联
         */
        @ResponseBody
        @ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR)
        @ExceptionHandler(DataIntegrityViolationException.class)
        public ResultBean handleException(DataIntegrityViolationException e) {
            logger.error("操作数据库出现异常:", e);
            return new ResultBean(e);
        }

        /*@ExceptionHandler(value = { Exception.class })
        @ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR)
        @ResponseBody
        public ResultBean unknownException(HttpServletRequest request,Exception ex) {
            return new ResultBean(500, 5002, ex.getMessage(),request.getRequestURL().toString());
        }*/

        /*@ExceptionHandler(value = { ConstraintViolationException.class })
        @ResponseStatus(HttpStatus.BAD_REQUEST)
        @ResponseBody
        public ResultBean constraintViolationException(HttpServletRequest request,ConstraintViolationException ex) {
            return new ResultBean(500, 5001, ex.getMessage(),request.getRequestURL().toString());
        }*/

        /*@ExceptionHandler(value = { IllegalArgumentException.class })
        @ResponseStatus(HttpStatus.BAD_REQUEST)
        @ResponseBody
        public ResultBean IllegalArgumentException(HttpServletRequest request,IllegalArgumentException ex) {
            return new ResultBean(501, 5002, ex.getMessage(),request.getRequestURL().toString());
        }*/

        @ExceptionHandler(value = { NoHandlerFoundException.class })
        @ResponseStatus(HttpStatus.NOT_FOUND)
        @ResponseBody
        public ResultBean noHandlerFoundException(HttpServletRequest request,Exception ex) {
            return new ResultBean(404, 4041, ex.getMessage(),request.getRequestURL().toString());
        }

        //添加全局异常处理流程，根据需要设置需要处理的异常，本文以MethodArgumentNotValidException为例
        @ExceptionHandler(value=MethodArgumentNotValidException.class)
        @ResponseBody
        public Object MethodArgumentNotValidHandler(HttpServletRequest request,
                                                    MethodArgumentNotValidException exception) throws Exception
        {
            //按需重新封装需要返回的错误信息
            List<ArgumentInvalidResult> invalidArguments = new ArrayList<>();
            //解析原错误信息，封装后返回，此处返回非法的字段名称，原始值，错误信息
            for (FieldError error : exception.getBindingResult().getFieldErrors()) {
                ArgumentInvalidResult invalidArgument = new ArgumentInvalidResult();
                invalidArgument.setDefaultMessage(error.getDefaultMessage());
                invalidArgument.setField(error.getField());
                invalidArgument.setRejectedValue(error.getRejectedValue());
                invalidArguments.add(invalidArgument);
            }
            return new ResultBean(400,3008,invalidArguments.toString(),request.getRequestURL().toString());
        }